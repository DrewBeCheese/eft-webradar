@page "/"
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using AncientMountain.Managed
@using AncientMountain.Managed.Services
@using System.Globalization
@using System.Text.Json;
@inject SignalRService SignalRService
@inject RadarService RadarService
@inject NavigationManager Navigation

<PageTitle>@windowTitle</PageTitle>
@if (showAlert)
{
    <div class="alert">
        <span class="alert-closebtn" @onclick="CloseAlert">&times;</span>
        @alertMessage
    </div>
}
<div class="canvas-container">
    <div class="connection-controls">
        <label title="IP Address/Hostname of Web Radar Server (WAN IP).">Server IP/Host: </label>
        <input type="text" @bind="host" class="host-input" maxlength="128" spellcheck="false" />
        <label title="Port to connect to on the Web Radar Server.">Port: </label>
        <input type="text" @bind="port" class="port-input" maxlength="5" spellcheck="false" />
        <label title="Password to authenticate with the Web Radar Server.">Password: </label>
        <input type="text" @bind="password" class="password-input" maxlength="12" spellcheck="false" />
        <button title="Connect to the remote Web Radar Server." class="rounded-button" @onclick="Connect" disabled="@isConnecting">Connect</button>
        <label title="Your in-game name. This will make the radar focus on you.">Your Name: </label>
        <input type="text" @bind="name" class="name-input" maxlength="25" spellcheck="false" />
        <label title="Scale Factor to make elements smaller/larger on the Radar Map.">Scale: </label>
        <input type="range" step="0.01" min="0.50" max="2.00" @bind="RadarService.Scale" @bind:culture="CultureInfo.InvariantCulture" />
        <label title="Zoom Factor to zoom in/out on the Radar Map.">Zoom: </label>
        <input type="range" step="0.01" min="0.01" max="2.00" @bind="RadarService.Zoom" @bind:culture="CultureInfo.InvariantCulture" />
        <a class="rounded-button" href="@($"{Navigation.BaseUri}ESP?host={host}&port={port}&password={password}")" target="_blank" rel="noopener noreferrer">Open ESP</a>

        <div class="widget-container @(isDragging ? "widget-dragging" : "")" style="left:@(widgetX)px; top:@(widgetY)px; position: absolute;">
            <div class="widget-header"
            @onmousedown="OnWidgetDragStart"
            @onmousemove="OnWidgetDragMove"
            @onmouseup="OnWidgetDragEnd"
            @onmouseout="OnWidgetDragEnd">
                <span>Loot Filter</span>
                <button @onclick="toggleLootWidget" class="minimize-btn">@(showLootWidget ? "-" : "+")</button>
            </div>
            @if (showLootWidget)
            {
                <div id="loot-widget" class="widget-body">
                    <label>Min Loot Price: @RadarService.lootUiConfig.MinPrice</label>
                    <input @bind="RadarService.lootUiConfig.MinPrice" type="range" min="0" max="500000" step="1000" />

                    <label>Important Loot Price: @RadarService.lootUiConfig.Important</label>
                    <input @bind="RadarService.lootUiConfig.Important" type="range" min="0" max="500000" step="1000">
                    <label>Search:</label>
                    <input @bind="RadarService.lootUiConfig.SearchFilter" type="text" placeholder="Search Loot...">
                    <div>
                        <input type="checkbox">Show Food

                        <input type="checkbox"> Show Meds

                        <input type="checkbox"> Show Backpacks
                    </div>
                    <div>
                        <button @onclick="@(() => {
                            RadarService.lootUiConfig = new LootUiConfig(50000, 200000, false, false, false, null);
                        })">Clear Search</button>
                    </div>
                    @if (RadarService.filteredLoot != null)
                    {
                        <table>

                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Price</th>
                                    <th>Remove</th>
                                </tr>
                            </thead>
                            <tbody>
                                @* //TODO: Make this a computed var that can be ran on the UI side as well instead of duplicating code *@
                                @foreach (var item in RadarService.filteredLoot)
                                {
                                    <tr>
                                        <td>@item.ShortName</td>
                                        <td>@item.Price</td>
                                        <td class="remove" @onclick="@(() => {RadarService.lootUiConfig.ExcludeItems.Add(item.Id);})">Remove</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            }
        </div>

    </div>
    <div class="canvas-wrapper">
        <SkiaSharp.Views.Blazor.SKCanvasView OnPaintSurface="OnPaintSurface" class="skia-canvas" EnableRenderLoop="true" />
    </div>
</div>

@code {
    private const string HTTPS_ERROR = "HTTPS is not supported! Change to http:// in the address bar.";
    private string windowTitle = Utils.GetRandomTitle();
    private string host = "192.168.50.160";
    private string port = "5000";
    private string password = "password";
    private string name = "localPlayer";
    private bool isHttps = false;
    private bool isConnecting = false;
    private bool showAlert = false;
    private string alertMessage = null;

    // Drag functionality variables
    private double widgetX = 15; // Initial X position
    private double widgetY = 62; // Initial Y position
    private bool isDragging = false;
    private double dragOffsetX;
    private double dragOffsetY;
    private double lastMouseX;
    private double lastMouseY;

    private bool showLootWidget = true;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        isHttps = uri.Scheme.Equals("https", StringComparison.OrdinalIgnoreCase);
        if (isHttps)
            ShowAlert(HTTPS_ERROR);

        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["host"] != null)
        {
            host = query["host"];
        }

        if (query["port"] != null)
        {
            port = query["port"];
        }

        if (query["password"] != null)
        {
            password = query["password"];
        }
    }

    private void toggleLootWidget()
    {
        showLootWidget = !showLootWidget;
        StateHasChanged();
    }

    private void OnWidgetDragStart(MouseEventArgs e)
    {
        // Start dragging and capture initial position
        isDragging = true;
        lastMouseX = e.ClientX;
        lastMouseY = e.ClientY;

        // Calculate offset from mouse to widget top-left corner
        dragOffsetX = e.ClientX - widgetX;
        dragOffsetY = e.ClientY - widgetY;
    }

    private void OnWidgetDragMove(MouseEventArgs e)
    {
        // Only handle if we're dragging
        if (!isDragging) return;

        // Update the widget position
        widgetX = e.ClientX - dragOffsetX;
        widgetY = e.ClientY - dragOffsetY;

        // Update last mouse position
        lastMouseX = e.ClientX;
        lastMouseY = e.ClientY;
    }

    private void HandleDocumentMouseMove(MouseEventArgs e)
    {
        // Only handle if we're dragging
        if (!isDragging) return;

        // Update the widget position
        widgetX = e.ClientX - dragOffsetX;
        widgetY = e.ClientY - dragOffsetY;

        // Update last mouse position
        lastMouseX = e.ClientX;
        lastMouseY = e.ClientY;
    }

    private void OnWidgetDragEnd(MouseEventArgs e)
    {
        // End dragging
        isDragging = false;
    }

    private async Task Connect()
    {
        isConnecting = true;
        StateHasChanged();
        try
        {
            if (isHttps)
                throw new Exception(HTTPS_ERROR);
            await SignalRService.StartConnectionAsync(host, port, password);
            CloseAlert();
        }
        catch (Exception ex)
        {
            ShowAlert($"Unhandled Error: {ex.Message}");
        }
        finally
        {
            isConnecting = false;
            StateHasChanged();
        }
    }

    private void ShowAlert(string message)
    {
        alertMessage = message;
        showAlert = true;
        StateHasChanged();
    }

    private void CloseAlert()
    {
        showAlert = false;
        alertMessage = null;
        StateHasChanged();
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        RadarService.Render(args, name);
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await SignalRService.StopConnectionAsync();
        }
        catch { }
    }
}