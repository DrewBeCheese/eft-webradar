@page "/esp"
@using AncientMountain.Managed.Services
@using SkiaSharp.Views.Blazor
@inject IJSRuntime js
@inject SignalRService SignalRService
@inject RadarService RadarService
@inject NavigationManager Navigation

<div class="canvas-container">
    <div class="connection-controls">
        <label title="Your in-game name. This will make the radar focus on you.">Your Name: </label>
        <input type="text" @bind="name" class="name-input" maxlength="25" spellcheck="false" />
        <div>
            <div class="input-group">
                <label for="width">Width (px):</label>
                <input @bind="RadarService.espUiConfig.ScreenWidth" type="number" id="width" name="width" min="0">
            </div>

            <div class="input-group">
                <label for="height">Height (px):</label>
                <input @bind="RadarService.espUiConfig.ScreenHeight" type="number" id="height" name="height" min="0">
            </div>
        </div>
        <label>FOV: </label> <input @bind="RadarService.espUiConfig.FOV" type="number" />
        <button @onclick="FullScreen">Full Screen</button>
    </div>
    <div id="esp-canvas" class="canvas-wrapper">
        <SkiaSharp.Views.Blazor.SKCanvasView OnPaintSurface="OnPaintSurface" class="skia-canvas" EnableRenderLoop="true" />
    </div>
</div>

@code {
    private string name = "localPlayer";
    private string host = "192.168.50.160";
    private string port = "5000";
    private string password = "password";

    protected override async void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (query["host"] != null)
        {
            host = query["host"];
        }

        if (query["port"] != null)
        {
            port = query["port"];
        }

        if (query["password"] != null)
        {
            password = query["password"];
        }

        await Connect();
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        RadarService.RenderESP(args, name);
        StateHasChanged();
    }

    private void FullScreen()
    {
        js.InvokeVoidAsync("fullscreen");
    }

    private async Task Connect()
    {
        StateHasChanged();
        try
        {
            await SignalRService.StartConnectionAsync(host, port, password);
            Console.WriteLine("Connected");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            StateHasChanged();
        }
    }
}
